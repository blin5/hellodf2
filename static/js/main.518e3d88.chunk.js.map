{"version":3,"sources":["video_back/background.mp4","pages/CamPage.js","pages/Main.js","pages/ShowPhoto.js","App.js","serviceWorker.js","index.js","img/HomePg.png"],"names":["module","exports","captured","Boolean","WebcamCapture","webcamRef","React","useRef","useState","imgSrc","setImgSrc","capture","useCallback","imageSrc","current","getScreenshot","className","src","label","onClick","activateWebcam","audio","ref","screenshotFormat","mirrored","to","HomePg","alt","withRouter","mode","name","url","accept","maxFileSize","showPhoto","App","path","exact","component","main","showphoto","autoPlay","loop","muted","style","position","width","left","top","height","objectFit","transform","zIndex","backgroundVideo","type","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,wC,2RCoBvCC,G,MAAWC,SACfD,GAAW,EAEX,IAAME,EAAgB,WAElB,IAAMC,EAAYC,IAAMC,OAAO,MAFP,EAGID,IAAME,SAAS,MAHnB,mBAGjBC,EAHiB,KAGTC,EAHS,KAKlBC,EAAUL,IAAMM,aAAY,WAChC,IAAMC,EAAWR,EAAUS,QAAQC,gBACnCL,EAAUG,GACVX,GAAW,IACV,CAACG,EAAWK,IAEf,OAAGR,GACDA,GAAW,EAEX,oCACA,yBACAc,UAAU,aACPP,GACG,yBACEQ,IAAKR,KAIb,kBAAC,SAAD,CAAQS,MAAM,WACd,kBAAC,SAAD,CAAQA,MAAM,aAAaC,QAASC,MAMpC,oCACE,kBAAC,IAAD,CACEJ,UAAU,YACVK,OAAO,EACPC,IAAKjB,EACLkB,iBAAiB,aACjBC,SAAS,UAEVf,GACC,yBACEQ,IAAKR,IAGT,4BACE,kBAAC,SAAD,CAAQS,MAAM,gBAAgBC,QAASR,IACvC,kBAAC,IAAD,CAAMc,GAAG,KACP,kBAAC,SAAD,CAAQP,MAAM,kBAQ1B,SAASE,IACL,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,kBAAkBC,IAAKS,IAAQC,IAAI,cAElD,4BAAI,kBAAC,EAAD,QAMKP,QCtDAQ,mBApBjB,WACI,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,WAAWC,IAAKS,IAAQC,IAAI,cAC3C,6BACA,kBAAC,IAAD,CAAMF,GAAG,eACT,4BAAI,kBAAC,SAAD,CAAQP,MAAM,kBAGlB,4BAAI,kBAAC,aAAD,CAAYW,KAAK,QAAQC,KAAK,SAASC,IAAI,eAAeC,OAAO,UAAUC,YAAa,WCQnFC,MAXjB,WACI,OACE,yBAAKlB,UAAU,OAEb,yBAAKA,UAAU,kBAAkBC,IAAKS,IAAQC,IAAI,gBCoC3CQ,MA7Cf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,aAAaE,UAAWC,IACpC,kBAAC,IAAD,CAAOH,KAAK,cAAcE,UAAWlB,IACrC,kBAAC,IAAD,CAAOgB,KAAK,cAAcE,UAAWE,KAEvC,yBAAKxB,UAAU,OACb,2BACEyB,UAAQ,EACRC,MAAI,EACJC,OAAK,EACLC,MAAO,CACLC,SAAU,WACVC,MAAO,OACPC,KAAM,MACNC,IAAK,MACLC,OAAQ,OACRC,UAAW,QACXC,UAAW,wBACXC,OAAQ,OAGV,4BAAQnC,IAAKoC,IAAiBC,KAAK,kBC5BvBnD,QACW,cAA7BoD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BzE,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.518e3d88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.ec33a837.mp4\";","import React, { Component } from 'react';\r\nimport HomePg from '../img/HomePg.png';\r\nimport backgroundVideo from '../video_back/background.mp4';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Card } from 'primereact/card';\r\nimport { Button } from 'primereact/button';\r\nimport '../App.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport Webcam from \"react-webcam\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\r\nimport App from '../App.js';\r\nimport {\r\n  BrowserView,\r\n  MobileView,\r\n  isBrowser,\r\n  isMobile\r\n} from \"react-device-detect\";\r\n\r\nvar captured = Boolean ;\r\ncaptured = false;\r\n\r\nconst WebcamCapture = () => {\r\n    \r\n    const webcamRef = React.useRef(null);\r\n    const [imgSrc, setImgSrc] = React.useState(null);\r\n  \r\n    const capture = React.useCallback(() => {\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      setImgSrc(imageSrc);\r\n      captured = true;\r\n    }, [webcamRef, setImgSrc]); //redirect to ShowImage component\r\n    \r\n    if(captured){\r\n      captured = false;\r\n      return(\r\n      <>\r\n      <div\r\n      className=\"App-photo\">\r\n        {imgSrc && (\r\n            <img\r\n              src={imgSrc}\r\n            />\r\n          )}\r\n      </div>\r\n      <Button label=\"Submit\" />\r\n      <Button label=\"Take again\" onClick={activateWebcam}/>\r\n      </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Webcam \r\n          className=\"App-photo\"\r\n          audio={false}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          mirrored=\"false\"\r\n        />\r\n        {imgSrc && (\r\n          <img\r\n            src={imgSrc}\r\n          />\r\n        )}\r\n        <h1>\r\n          <Button label=\"Capture photo\" onClick={capture}/>\r\n          <Link to=\"/\" >\r\n            <Button label=\"Back home\" />\r\n          </Link>\r\n        </h1>\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\nfunction activateWebcam() {\r\n    return (\r\n      <div className=\"App\">\r\n        <img className=\"App-logo-little\" src={HomePg} alt=\"HomePgPic\" />\r\n  \r\n        <h1><WebcamCapture  /></h1>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default activateWebcam;","import React, { Component } from 'react';\r\nimport HomePg from '../img/HomePg.png';\r\nimport backgroundVideo from '../video_back/background.mp4';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Button } from 'primereact/button';\r\nimport '../App.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\nimport {withRouter} from 'react-router-dom'\r\nimport activateWebcam from './CamPage';\r\n\r\nfunction Main() {\r\n    return (\r\n      <div className=\"App\">\r\n        <img className=\"App-logo\" src={HomePg} alt=\"HomePgPic\" />\r\n        <nav>\r\n        <Link to=\"/TakePhoto/\" >\r\n        <h1><Button label=\"Take photo\"  /></h1>\r\n        </Link>\r\n        </nav>\r\n        <h1><FileUpload mode=\"basic\" name=\"demo[]\" url=\"./upload.php\" accept=\"image/*\" maxFileSize={1000000}  /></h1>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  \r\n  function onUpload() {\r\n    this.toast.show({severity: 'info', summary: 'Success', detail: 'File Uploaded'});\r\n  }\r\n  \r\n  export default withRouter(Main);","import React, { Component } from 'react';\r\nimport HomePg from '../img/HomePg.png';\r\nimport backgroundVideo from '../video_back/background.mp4';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Card } from 'primereact/card';\r\nimport { Button } from 'primereact/button';\r\nimport '../App.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport Webcam from \"react-webcam\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport App from '../App.js';\r\nimport {\r\n  BrowserView,\r\n  MobileView,\r\n  isBrowser,\r\n  isMobile\r\n} from \"react-device-detect\";\r\n\r\nfunction showPhoto() {\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <img className=\"App-logo-little\" src={HomePg} alt=\"HomePgPic\" />\r\n  \r\n  \r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default showPhoto;","import React, { Component } from 'react';\nimport HomePg from './img/HomePg.png';\nimport backgroundVideo from './video_back/background.mp4';\nimport { FileUpload } from 'primereact/fileupload';\nimport { Button } from 'primereact/button';\nimport './App.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport activateWebcam from './pages/CamPage.js';\nimport main from './pages/Main.js';\nimport showphoto from './pages/ShowPhoto.js';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n      <Route path=\"/\" exact component={main} />\n      <Route path=\"/hellodf2/\" component={main} />\n      <Route path=\"/TakePhoto/\" component={activateWebcam} />\n      <Route path=\"/ShowPhoto/\" component={showphoto} />\n      </Switch>\n    <div className=\"App\">\n      <video\n        autoPlay\n        loop\n        muted\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          left: \"50%\",\n          top: \"50%\",\n          height: \"100%\",\n          objectFit: \"cover\",\n          transform: \"translate(-50%, -50%)\",\n          zIndex: \"-1\"\n        }}\n        >\n        <source src={backgroundVideo} type=\"video/mp4\" />\n      </video>\n\n    </div>\n    </Router>\n  );\n}\n\nfunction takePhoto() {\n  return (\n    <Router>\n        <Route path=\"/TakePhoto\" component={activateWebcam} />\n    </Router>\n  );\n}\n\nfunction onUpload() {\n  this.toast.show({severity: 'info', summary: 'Success', detail: 'File Uploaded'});\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/HomePg.d6161b97.png\";"],"sourceRoot":""}